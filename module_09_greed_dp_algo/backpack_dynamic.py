# Динамічне програмування. Цей підхід створює таблицю, яка відображає максимальну вартість, яку можна отримати для
# кожної підмножини місткості рюкзака, використовуючи перші N предметів. Необхідно обчислити значення в таблиці
# рекурсивно та використати попередні обчислення, щоб знайти оптимальний набір предметів.

# Цей підхід має поліноміальну часову складність O(nW), де n — кількість предметів, а W — місткість рюкзака,
# і є набагато ефективнішим, ніж повний перебір або жадібний підхід, особливо для великих вхідних даних.

def knapSack(W, wt, val, n):
    # створюємо таблицю K для зберігання оптимальних значень підзадач
    K = [[0 for w in range(W + 1)] for i in range(n + 1)]

    # будуємо таблицю K знизу вгору
    for i in range(n + 1):
        for w in range(W + 1):
            if i == 0 or w == 0:
                K[i][w] = 0
            elif wt[i - 1] <= w:
                K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w])
            else:
                K[i][w] = K[i - 1][w]

    return K[n][W]


if __name__ == '__main__':
    # ваги та вартість предметів
    value = [60, 100, 120]
    weight = [10, 20, 30]
    # місткість рюкзака
    capacity = 50
    # кількість предметів
    n = len(value)
    # виклик функції
    print(knapSack(capacity, weight, value, n))  # 220
