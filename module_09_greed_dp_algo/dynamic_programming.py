# Динамічне програмування — це метод розв'язання складних задач шляхом розбиття їх на простіші підзадачі. Він
# використовується, коли задача має підзадачі, що перекриваються, тобто одні й ті самі дрібніші задачі розв'язуються
# знову і знову в процесі обчислення. Замість того щоб повторно розв'язувати ці підзадачі, динамічне програмування
# зберігає їхні результати в таблиці (часто званій таблицею мемоїзації) для подальшого використання,
# тим самим зменшуючи загальну кількість обчислень.
#
# У динамічному програмуванні є два ключові елементи.
# Перший — що оптимальне розв’язання для всієї задачі можна побудувати з оптимальних розв’язків її підзадач.
# Другий елемент — наявність підзадач, що перекриваються. Це коли в процесі розв'язання задачі багато підзадач
# розв'язуються багаторазово. Тому результати розв'язання підзадач зберігаються для повторного використання.
#
# Динамічне програмування може бути застосоване у двох формах:
# Верхній підхід (Top-Down), також відомий як мемоїзація. Ми починаємо з основної задачі та розбиваємо її на
# підзадачі, які розв'язуємо рекурсивно, зберігаючи результати для запобігання повторному обчисленню.
# Нижній підхід (Bottom-Up), або висхідне динамічне програмування. Ми починаємо з найдрібніших підзавдань і поступово
# нарощуємо розв'язки, рухаючись до розв'язання основного завдання.

def fibonacci_up_bottom(_n, _memo):
    if _n in _memo:
        return _memo[_n]
    if _n <= 2:
        return 1
    _memo[_n] = fibonacci_up_bottom(_n - 1, _memo) + fibonacci_up_bottom(_n - 2, _memo)
    return _memo[_n]


n = 10
memo = {}
fib_number = fibonacci_up_bottom(n, memo)
print(fib_number)  # 55


def fibonacci_bottom_up(_n):
    # Base cases
    if _n == 0:
        return 0
    elif _n == 1:
        return 1

    # Починаємо з базових кейсів і нарощуємо розв'язок
    fib_numbers = [0] * (_n + 1)
    fib_numbers[1] = 1

    for i in range(2, _n + 1):
        fib_numbers[i] = fib_numbers[i - 1] + fib_numbers[i - 2]

    return fib_numbers[_n]


n = 10
fib_number_bottom_up = fibonacci_bottom_up(n)
print(fib_number_bottom_up)  # 55
