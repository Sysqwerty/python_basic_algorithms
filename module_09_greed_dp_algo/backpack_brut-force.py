# Брутфорс (Brute-force), або повний перебір. Необхідно перевірити всі можливі комбінації предметів, щоб знайти
# найкращий набір. Цей метод майже завжди є недоцільним через високу часову складність.

# часова складність є експоненційною O(n^2), де n — кількість предметів.

# Функція для обчислення максимальної вартості
def knapSack(W, wt, val, n):
    # Базовий випадок
    if n == 0 or W == 0:
        return 0

    # Якщо вага n-го предмета більше, ніж місткість рюкзака, то цей предмет не можна включити у рюкзак
    if wt[n - 1] > W:
        return knapSack(W, wt, val, n - 1)

    # повертаємо максимум із двох випадків:
    # (1) n-ий предмет включено
    # (2) не включено
    else:
        return max(
            val[n - 1] + knapSack(W - wt[n - 1], wt, val, n - 1),
            knapSack(W, wt, val, n - 1),
        )


if __name__ == '__main__':
    # ваги та вартість предметів
    value = [60, 100, 120]
    weight = [10, 20, 30]
    # місткість рюкзака
    capacity = 50
    # кількість предметів
    n = len(value)
    # викликаємо функцію
    print(knapSack(capacity, weight, value, n))  # 220
