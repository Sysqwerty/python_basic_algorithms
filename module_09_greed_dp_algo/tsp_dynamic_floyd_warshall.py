# Алгоритм Флойда-Воршала — це алгоритм динамічного програмування, який використовується для знаходження найкоротших
# шляхів між усіма парами вершин у ваговому графі (який може містити як додатні, так і від'ємні ваги ребер). Однак,
# алгоритм не працює, якщо у графі є цикли з від'ємною вагою.

# Часова складність алгоритму Флойда-Воршала становить O(n^3), де n — кількість вершин у графі. Це робить його досить
# ефективним для розрахунків у графах з невеликою або середньою кількістю вершин.

def floyd_warshall(_graph):
    # Кількість вершин у графі
    n = len(_graph)

    # Ініціалізація матриці відстаней
    distance = [[float('inf')] * n for _ in range(n)]

    # Заповнення діагоналі нулями (відстань від вершини до самої себе)
    for i in range(n):
        distance[i][i] = 0

    # Заповнення матриці відстаней вагами ребер
    for i in range(n):
        for j in range(n):
            if _graph[i][j] != 0:
                distance[i][j] = _graph[i][j]

    # Оновлення матриці відстаней
    for k in range(n):
        for i in range(n):
            for j in range(n):
                distance[i][j] = min(distance[i][j], distance[i][k] + distance[k][j])

    return distance


if __name__ == '__main__':
    # матриця суміжності, де 0 означає відсутність ребра між вершинами
    graph = [
        [0, 3, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0],
        [0, 0, 0, 7, 0, 2],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 2, 0, 3],
        [0, 0, 0, 0, 0, 0]
    ]

    distance_matrix = floyd_warshall(graph)
    for row in distance_matrix:
        print(row)
