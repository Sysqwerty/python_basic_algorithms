import networkx as nx

# Створюємо порожній граф
G = nx.Graph()
# Додаємо вузол
G.add_node("A")
# Додаємо список вузлів
G.add_nodes_from(["B", "C", "D"])
# Додаємо ребро
G.add_edge("A", "B")
# Додаємо список ребер
G.add_edges_from([("A", "C"), ("B", "C"), ("B", "D")])
# Щоб отримати список усіх вузлів графа, використовуйте атрибут nodes.
print(G.nodes())  # ['A', 'B', 'C', 'D']
# Щоб отримати список усіх ребер графа, використовуйте атрибут edges.
print(G.edges())  # [('A', 'B'), ('A', 'C'), ('B', 'C'), ('B', 'D')]
# Щоб дізнатися, які вузли з'єднані з конкретним вузлом, використовуйте метод neighbors().
print(G.neighbors("A"))  # ['B', 'C']
# Щоб видалити вузол із графа (а також усі ребра, пов'язані з цим вузлом), використовуйте метод remove_node().
G.remove_node("A")
# Якщо вам потрібно видалити декілька вузлів одночасно, використовуйте метод remove_nodes_from().
G.remove_nodes_from(["B", "C"])
# Щоб видалити ребро між двома вузлами, використовуйте метод remove_edge().
G.remove_edge("A", "B")
# Якщо вам потрібно видалити декілька ребер одночасно, використовуйте метод remove_edges_from().
G.remove_edges_from([("A", "C"), ("B", "D")])

# У networkX вузли та ребра графа можуть бути майже будь-якими об'єктами Python.
# Вузли можуть бути числами, рядками, зображеннями, XML об'єктами, іншими графами тощо. Наприклад:
G.add_node(1)
G.add_node("A")
G.add_node((2, 3))

# Ребра являють собою пари вузлів. Вони можуть мати додаткові атрибути, такі як вага, етикетка тощо.
G.add_edge(1, "A", weight=2.5, label="connection")

# Ви можете додавати атрибути до вузлів і ребер під час їх створення або після.
G.nodes[1]["color"] = "red"
G.edges[1, "A"]["label"] = "bridge"

# Щоб дізнатися, які вузли з'єднані з конкретним вузлом, використовуйте індексацію графа за допомогою імені вузла.
neighbors_of_A = G["A"]  # {'B': {}, 'C': {}}

# Щоб отримати інформацію про ребро між двома вузлами, використовуйте подвійну індексацію.
edge_info = G["A"]["B"]  # {}

# Якщо в ребра є атрибути, ви можете отримати доступ до них через третій рівень індексації.
edge_weight = G["A"]["B"]["weight"]

# Атрибути дозволяють зберігати додаткову інформацію про граф, його вузли та ребра. Це може бути корисно для аналізу графа, візуалізації або інших завдань.
# Ви можете додавати атрибути до графа через його атрибут graph.
G.graph["name"] = "My Graph"

# Щоб додати атрибут до конкретного вузла, використовуйте атрибут nodes графа.
G.nodes["A"]["color"] = "blue"

# Щоб додати атрибут до ребра, використовуйте індексацію графа за допомогою імен вузлів, які формують це ребро.
G["A"]["B"]["weight"] = 5

# Також можна додавати атрибути під час створення вузлів і ребер:
G.add_node("A", color="red")
G.add_edge("A", "B", weight=4)
