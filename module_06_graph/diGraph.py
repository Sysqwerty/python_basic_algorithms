import networkx as nx

# У бібліотеці networkX орієнтований граф створюється за допомогою класу DiGraph().
DG = nx.DiGraph()
# Ребра додаються так само, як і в неорієнтованому графі, але вони будуть мати напрямок.
DG.add_edge("A", "B")
# У цьому прикладі ребро веде від вузла "A" до вузла "B". Якщо ви хочете додати ребро, яке веде у зворотному напрямку, вам потрібно додати інше ребро:
DG.add_edge("B", "A")

# Якщо у вас є неорієнтований граф і ви хочете створити орієнтований граф на його основі, використовуйте клас DiGraph().
G = nx.Graph()
G.add_edges_from([("A", "B"), ("B", "C")])
DG = nx.DiGraph(G)

# Якщо у вас є орієнтований граф і ви хочете створити неорієнтований граф на його основі, використовуйте клас Graph().
DG = nx.DiGraph()
DG.add_edges_from([("A", "B"), ("B", "C")])
G = nx.Graph(DG)

